---
alwaysApply: true
---

# ==========================================================

# 🏨 Hotel Booking Microservices System

# ==========================================================

## 📦 Tổng quan

Hệ thống đặt phòng khách sạn triển khai theo mô hình **Microservices**, gồm:

1. **Frontend** (Next.js + TypeScript)
2. **API Gateway** (NestJS)
3. **Account-service** (Java Spring Boot + MySQL)
4. **Booking-service** (.NET 8 + PostgreSQL + Redis)
5. **Payment-service** (Golang + MongoDB)
6. **Consul** (Service discovery)
7. **Prometheus + Grafana** (Monitoring)
8. **Logging stack** (stdout hoặc ELK)

Tất cả các service giao tiếp qua **gRPC nội bộ**, và chỉ **Frontend ↔ Gateway** sử dụng **REST API**.

---

## 📁 Cấu trúc thư mục

/hotel-booking/
├── frontend/
├── api-gateway/
├── account-service/
├── booking-service/
├── payment-service/
├── consul/
├── prometheus/
├── grafana/
├── docker-compose.yml
└── README.md

markdown
Copy code

---

## 💻 Frontend (Next.js + TypeScript)

### Chức năng

- Giao diện người dùng cho khách đặt phòng, thanh toán, và quản lý tài khoản.
- Gọi API thông qua `api-gateway` (REST).
- Có các trang chính:
  - `/login`, `/register`
  - `/rooms` (danh sách phòng)
  - `/room/[id]` (chi tiết phòng, đánh giá, đặt phòng)
  - `/payment` (thanh toán)
  - `/profile` (thông tin người dùng)
- Realtime cập nhật trạng thái phòng bằng WebSocket hoặc SSE (từ Booking-service thông qua Gateway).

### Công nghệ

- Next.js 15 (App Router)
- TypeScript
- Zustand (hoặc Redux Toolkit)
- Axios để gọi API
- TailwindCSS
- JWT lưu trong cookie (httpOnly)

---

## 🌐 API Gateway (NestJS)

### Chức năng

- Gateway trung gian giữa Frontend và các service gRPC.
- Xác thực JWT từ Account-service.
- Tất cả request REST từ frontend được chuyển thành gRPC call tới backend.
- Ghi log, rate-limit, và xử lý lỗi toàn cục.

### Công nghệ

- NestJS + TypeScript
- gRPC clients tới Account, Booking, Payment
- JWT middleware xác minh public key
- Winston logger
- Dockerfile riêng

---

## 🔐 Account-service (Java Spring Boot + MySQL)

### Vai trò

- Quản lý người dùng, vai trò, quyền hạn.
- Là **Identity Provider**, phát hành và xác minh **JWT (RSA)**.

### Bảng dữ liệu

- `Account(ID, RoleID, username, email, phone, password, createdAt, deletedAt)`
- `Role(ID, name, createdAt, deletedAt)`
- `Permission(ID, name, permission, createdAt, deletedAt)`
- `RolePermission(ID, RoleID, PermissionID)`

### JWT

- Sử dụng **RSA key pair**:
  - private key: ký JWT
  - public key: cho gateway & service khác xác minh
- Refresh token lưu trong Redis (TTL 7 ngày)

### Công nghệ

- Spring Boot 3
- Spring Security + JWT
- JPA + Hibernate
- MySQL
- gRPC Server

---

## 🏠 Booking-service (.NET 8 + PostgreSQL + Redis Lock)

### Vai trò

- Quản lý phòng, loại phòng, hình ảnh, đánh giá, địa điểm, và đặt phòng.
- Đảm bảo **tránh trùng đặt phòng** bằng **Redis distributed lock**.

### Bảng dữ liệu

- `Room(ID, name, typeRoomID, locationID, createdAt, deletedAt)`
- `TypeRoom(ID, name, pricePerHour, createdAt, deletedAt)`
- `Image(ID, RoomID, url)`
- `Review(ID, roomID, accountID, comment, evaluate, createdAt, updatedAt, deletedAt)`
- `Location(ID, name, address, createdAt, deletedAt)`
- `RoomBooking(ID, roomID, checkinTime, checkoutTime, status[holding, success], createdAt, deletedAt)`

### Redis Lock

- Key: `room:{roomID}:lock`
- TTL: 30 giây
- Khi user chọn phòng:
  - Nếu phòng chưa bị khóa → đặt lock → ghi trạng thái "holding"
  - Nếu user không thanh toán trong 30s → lock tự giải phóng

### Công nghệ

- ASP.NET Core 8 Web API
- Entity Framework Core + PostgreSQL
- StackExchange.Redis
- gRPC Server + Client
- Serilog cho logging

---

## 💳 Payment-service (Golang + MongoDB)

### Vai trò

- Quản lý thanh toán, khuyến mãi, và giao dịch.
- Thanh toán một phần online.
- Xử lý rollback nếu thanh toán thất bại.
- Liên kết với Booking-service qua gRPC.

### Collections (MongoDB)

- `Promotion(ID, code, startDate, endDate, discount, createdAt, deletedAt)`
- `Payment(ID, PromotionID, status[paid, yet], total, tax, discount, totalPrice, roomBookingIDs[], createdAt, deletedAt)`
- `Transaction(ID, PaymentID, Method, Status[pending, success, failed], CreatedAt, UpdatedAt)`

### Công nghệ

- Go 1.22
- Gin framework
- MongoDB driver
- gRPC Server + Client
- Logrus logger

---

## 🧭 Service Discovery (Consul)

- Các service đăng ký với Consul khi khởi động.
- Gateway truy vấn để biết địa chỉ runtime.
- Cấu hình file `consul/config.hcl`.
- Port mặc định: `8500`.

---

## 📊 Monitoring

- **Prometheus** thu metrics từ tất cả service (`/metrics` endpoint).
- **Grafana** hiển thị dashboard.
- Mỗi service export basic metrics (CPU, request count, latency).

---

## 🧾 Logging

- Booking: Serilog (JSON stdout)
- Payment: Logrus
- Account: SLF4J
- Gateway: Winston
- Docker thu log stdout để gửi về ELK (tùy chọn).

---

## 🐳 Docker & Deployment

### Dockerfile

Mỗi service có Dockerfile riêng:

- Base image phù hợp với ngôn ngữ.
- Copy source code.
- Build và expose port.
- CMD chạy ứng dụng.

### docker-compose.yml (ở root)

Chứa:

- frontend
- api-gateway
- account-service
- booking-service
- payment-service
- consul
- redis
- mongodb
- postgres
- mysql
- prometheus
- grafana

Tất cả cùng network `hotel_net`.

---

## ⚙️ Quy tắc chung

- Dữ liệu thời gian dùng **UTC**.
- API response format:
  ```json
  { "data": ..., "message": "string", "statusCode": 200 }
  Giao tiếp giữa các service nội bộ: gRPC only.
  ```

Frontend chỉ gọi api-gateway.

JWT xác minh ở gateway trước khi chuyển tiếp request.

Tên biến và field theo camelCase.

Code phải tuân thủ Clean Architecture + SOLID.

📘 Ghi chú

Mỗi DB sử dụng Docker volume để lưu dữ liệu.

Có thể mở rộng bằng Kafka nếu cần event-driven.

Khi triển khai production, thay docker-compose bằng Kubernetes Helm chart.