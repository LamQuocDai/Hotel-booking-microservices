// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/payments": {
            "get": {
                "description": "Get a paginated list of payments with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get all payments with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "pageNumber",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at\"",
                        "description": "Sort by field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc\"",
                        "description": "Sort direction (asc/desc)",
                        "name": "sortDirection",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "paid",
                            "failed",
                            "cancelled",
                            "refunded"
                        ],
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by customer ID",
                        "name": "customerId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment method",
                        "name": "paymentMethod",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum payment amount",
                        "name": "minAmount",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum payment amount",
                        "name": "maxAmount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/pagination.PaginatedResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new payment with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Create a new payment",
                "parameters": [
                    {
                        "description": "Payment details",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Payment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/payments/customer/{customerId}": {
            "get": {
                "description": "Get all payments for a specific customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payments by customer ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Payment"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/payments/{id}": {
            "get": {
                "description": "Get a single payment by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Payment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a payment by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Delete a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a payment with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Update a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated payment details",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Payment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/promotions": {
            "get": {
                "description": "Get a paginated list of promotions with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promotions"
                ],
                "summary": "Get all promotions with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "pageNumber",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at\"",
                        "description": "Sort by field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc\"",
                        "description": "Sort direction (asc/desc)",
                        "name": "sortDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by promotion code",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "isActive",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum discount percentage",
                        "name": "minDiscount",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum discount percentage",
                        "name": "maxDiscount",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/pagination.PaginatedResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new promotion with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promotions"
                ],
                "summary": "Create a new promotion",
                "parameters": [
                    {
                        "description": "Promotion data",
                        "name": "promotion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePromotionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Promotion"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/promotions/{id}": {
            "get": {
                "description": "Get a single promotion by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promotions"
                ],
                "summary": "Get promotion by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Promotion ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Promotion"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing promotion by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promotions"
                ],
                "summary": "Delete a promotion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Promotion ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update an existing promotion with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promotions"
                ],
                "summary": "Update a promotion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Promotion ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Promotion update data",
                        "name": "promotion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdatePromotionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Promotion"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Get a paginated list of transactions with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get all transactions with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "pageNumber",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at\"",
                        "description": "Sort by field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc\"",
                        "description": "Sort direction (asc/desc)",
                        "name": "sortDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment ID",
                        "name": "paymentId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "success",
                            "failed",
                            "timeout"
                        ],
                        "type": "string",
                        "description": "Filter by transaction status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "payment",
                            "refund",
                            "partial_refund"
                        ],
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment gateway",
                        "name": "paymentGateway",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum transaction amount",
                        "name": "minAmount",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum transaction amount",
                        "name": "maxAmount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/pagination.PaginatedResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new transaction with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Create a new transaction",
                "parameters": [
                    {
                        "description": "Transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Transaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/transactions/payment/{paymentId}": {
            "get": {
                "description": "Get all transactions for a specific payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transactions by payment ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "paymentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Transaction"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        },
        "/transactions/{id}": {
            "get": {
                "description": "Get a single transaction by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Transaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a transaction by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Delete a transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a transaction with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Update a transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Transaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreatePaymentRequest": {
            "type": "object",
            "required": [
                "currency",
                "customerId",
                "paymentMethod",
                "total"
            ],
            "properties": {
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "customerId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "Hotel booking payment"
                },
                "paymentMethod": {
                    "type": "string",
                    "example": "credit_card"
                },
                "promotionId": {
                    "type": "string"
                },
                "roomBookingIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tax": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "total": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                }
            }
        },
        "model.CreatePromotionRequest": {
            "type": "object",
            "required": [
                "code",
                "discount",
                "endDate",
                "startDate"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SAVE20"
                },
                "description": {
                    "type": "string",
                    "example": "Save 20% on your booking"
                },
                "discount": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 20.5
                },
                "endDate": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "model.CreateTransactionRequest": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "paymentGateway",
                "paymentId",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "externalId": {
                    "type": "string",
                    "example": "stripe_pi_1234"
                },
                "paymentGateway": {
                    "type": "string",
                    "example": "stripe"
                },
                "paymentId": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "payment",
                        "refund",
                        "partial_refund"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TransactionType"
                        }
                    ],
                    "example": "payment"
                }
            }
        },
        "model.Payment": {
            "type": "object",
            "required": [
                "currency",
                "customerId",
                "status",
                "total",
                "totalPrice"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "customerId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "Hotel booking payment"
                },
                "discount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 20
                },
                "id": {
                    "type": "string"
                },
                "paymentMethod": {
                    "type": "string",
                    "example": "credit_card"
                },
                "promotionId": {
                    "type": "string"
                },
                "roomBookingIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "enum": [
                        "pending",
                        "paid",
                        "failed",
                        "cancelled",
                        "refunded"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PaymentStatus"
                        }
                    ],
                    "example": "pending"
                },
                "tax": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "total": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "totalPrice": {
                    "type": "number",
                    "minimum": 0,
                    "example": 90
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.PaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "paid",
                "failed",
                "cancelled",
                "refunded"
            ],
            "x-enum-varnames": [
                "PaymentStatusPending",
                "PaymentStatusPaid",
                "PaymentStatusFailed",
                "PaymentStatusCancelled",
                "PaymentStatusRefunded"
            ]
        },
        "model.Promotion": {
            "type": "object",
            "required": [
                "code",
                "discount",
                "endDate",
                "startDate"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SAVE20"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "Save 20% on your booking"
                },
                "discount": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 20.5
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "startDate": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Transaction": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "paymentId",
                "status",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "createdAt": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "externalId": {
                    "type": "string",
                    "example": "stripe_pi_1234"
                },
                "failureReason": {
                    "type": "string"
                },
                "gatewayResponse": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "paymentGateway": {
                    "type": "string",
                    "example": "stripe"
                },
                "paymentId": {
                    "type": "string"
                },
                "processedAt": {
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "pending",
                        "success",
                        "failed",
                        "timeout"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TransactionStatus"
                        }
                    ],
                    "example": "pending"
                },
                "type": {
                    "enum": [
                        "payment",
                        "refund",
                        "partial_refund"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TransactionType"
                        }
                    ],
                    "example": "payment"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "success",
                "failed",
                "timeout"
            ],
            "x-enum-varnames": [
                "TransactionStatusPending",
                "TransactionStatusSuccess",
                "TransactionStatusFailed",
                "TransactionStatusTimeout"
            ]
        },
        "model.TransactionType": {
            "type": "string",
            "enum": [
                "payment",
                "refund",
                "partial_refund"
            ],
            "x-enum-varnames": [
                "TransactionTypePayment",
                "TransactionTypeRefund",
                "TransactionTypePartialRefund"
            ]
        },
        "model.UpdatePaymentRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Hotel booking payment"
                },
                "paymentMethod": {
                    "type": "string",
                    "example": "credit_card"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PaymentStatus"
                        }
                    ],
                    "example": "paid"
                }
            }
        },
        "model.UpdatePromotionRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SAVE20"
                },
                "description": {
                    "type": "string",
                    "example": "Save 20% on your booking"
                },
                "discount": {
                    "type": "number",
                    "example": 20.5
                },
                "endDate": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "model.UpdateTransactionRequest": {
            "type": "object",
            "properties": {
                "externalId": {
                    "type": "string",
                    "example": "stripe_pi_1234"
                },
                "failureReason": {
                    "type": "string"
                },
                "gatewayResponse": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TransactionStatus"
                        }
                    ],
                    "example": "success"
                }
            }
        },
        "pagination.PaginatedResponse": {
            "type": "object",
            "properties": {
                "items": {},
                "pagination": {
                    "$ref": "#/definitions/pagination.PaginationInfo"
                }
            }
        },
        "pagination.PaginationInfo": {
            "type": "object",
            "properties": {
                "hasNext": {
                    "type": "boolean",
                    "example": true
                },
                "hasPrevious": {
                    "type": "boolean",
                    "example": false
                },
                "pageNumber": {
                    "type": "integer",
                    "example": 1
                },
                "pageSize": {
                    "type": "integer",
                    "example": 10
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "totalPages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "response.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "isSuccess": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Payment Service API",
	Description:      "This is a payment service API with promotion management",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
