# Account Service - Hotel Booking Microservices

## üì¶ T·ªïng quan

Account-service l√† **Identity Provider (IDP)** c·ªßa h·ªá th·ªëng Hotel Booking Microservices, ch·ªãu tr√°ch nhi·ªám:

- Qu·∫£n l√Ω ng∆∞·ªùi d√πng, vai tr√≤, quy·ªÅn h·∫°n
- X√°c th·ª±c v√† ph√¢n quy·ªÅn JWT
- Cung c·∫•p gRPC API cho c√°c service kh√°c
- Cung c·∫•p REST API cho Frontend

## üèóÔ∏è Ki·∫øn tr√∫c

### C√¥ng ngh·ªá

- **Java 17+**
- **Spring Boot 3.2.0**
- **Spring Security + JWT (RSA)**
- **Spring Data JPA + Hibernate**
- **MySQL 8.0**
- **Redis** (refresh token)
- **gRPC** (service communication)
- **Maven** (build tool)

### C·∫•u tr√∫c th∆∞ m·ª•c

```
src/main/java/com/hotelbooking/account/
‚îú‚îÄ‚îÄ controller/          # REST Controllers
‚îú‚îÄ‚îÄ service/            # Business Logic
‚îú‚îÄ‚îÄ repository/         # Data Access Layer
‚îú‚îÄ‚îÄ entity/             # JPA Entities
‚îú‚îÄ‚îÄ dto/                # Data Transfer Objects
‚îú‚îÄ‚îÄ config/             # Configuration Classes
‚îú‚îÄ‚îÄ security/           # Security Configuration
‚îú‚îÄ‚îÄ grpc/               # gRPC Services
‚îî‚îÄ‚îÄ exception/          # Exception Handlers
```

## üóÑÔ∏è Database Schema

### Account Entity

```java
@Entity
@Table(name = "accounts")
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private UUID id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false, unique = true)
    private String email;

    private String phone;

    @Column(nullable = false)
    private String password; // BCrypt encoded

    @ManyToMany(fetch = FetchType.EAGER)
    private Set<Role> roles;

    private OffsetDateTime createdAt;
    private OffsetDateTime deletedAt;
}
```

### Role Entity

```java
@Entity
@Table(name = "roles")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private UUID id;

    @Column(nullable = false, unique = true)
    private String name;

    @ManyToMany(fetch = FetchType.EAGER)
    private Set<Permission> permissions;

    private OffsetDateTime createdAt;
    private OffsetDateTime deletedAt;
}
```

### Permission Entity

```java
@Entity
@Table(name = "permissions")
public class Permission {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private UUID id;

    @Column(nullable = false, unique = true)
    private String name;

    @Column(nullable = false, unique = true)
    private String permission;

    private OffsetDateTime createdAt;
    private OffsetDateTime deletedAt;
}
```

## üîê Security & Authentication

### JWT Configuration

- **Algorithm**: RS256 (RSA)
- **Private Key**: K√Ω JWT (Account Service)
- **Public Key**: X√°c minh JWT (API Gateway & Services)
- **Access Token**: 1 gi·ªù
- **Refresh Token**: 7 ng√†y (l∆∞u trong Redis)

### Password Security

- **Encoder**: BCrypt
- **Strength**: 12 rounds

### API Security

- **CORS**: Enabled for all origins
- **CSRF**: Disabled (JWT-based)
- **Authentication**: JWT Bearer Token

## üåê API Endpoints

### REST API (Port 3002)

#### Authentication

- `POST /auth/login` - ƒêƒÉng nh·∫≠p
- `POST /auth/register` - ƒêƒÉng k√Ω
- `POST /auth/refresh` - L√†m m·ªõi token
- `GET /auth/health` - Health check

#### Response Format

```json
{
  "token": "jwt_access_token",
  "refreshToken": "refresh_token",
  "user": {
    "id": "uuid",
    "username": "string",
    "email": "string",
    "phone": "string",
    "role": "string",
    "createdAt": "ISO8601"
  }
}
```

### gRPC API (Port 50051)

#### Service: AccountService

- `rpc Login(LoginRequest) returns (LoginResponse)`
- `rpc Register(RegisterRequest) returns (RegisterResponse)`
- `rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse)`
- `rpc GetProfile(GetProfileRequest) returns (GetProfileResponse)`

## ‚öôÔ∏è Configuration

### application.yml

```yaml
server:
  port: 3002

spring:
  datasource:
    url: jdbc:mysql://mysql:3306/account_db?useSSL=false&serverTimezone=UTC
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  data:
    redis:
      host: redis
      port: 6379

jwt:
  private-key: |
    -----BEGIN PRIVATE KEY-----
    [RSA_PRIVATE_KEY]
    -----END PRIVATE KEY-----
  public-key: |
    -----BEGIN PUBLIC KEY-----
    [RSA_PUBLIC_KEY]
    -----END PUBLIC KEY-----
  expiration: 3600000

grpc:
  server:
    port: 50051
```

### Environment Variables

```bash
SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/account_db
SPRING_DATASOURCE_USERNAME=root
SPRING_DATASOURCE_PASSWORD=123456
SPRING_DATA_REDIS_HOST=redis
SPRING_DATA_REDIS_PORT=6379
JWT_PRIVATE_KEY=[RSA_PRIVATE_KEY]
JWT_PUBLIC_KEY=[RSA_PUBLIC_KEY]
```

## üê≥ Docker

### Dockerfile

```dockerfile
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY pom.xml .
COPY src ./src
RUN apt-get update && apt-get install -y maven
RUN mvn clean package -DskipTests
EXPOSE 3002 50051
CMD ["java", "-jar", "target/account-service-0.0.1-SNAPSHOT.jar"]
```

### Docker Compose

```yaml
account-service:
  build: ./account-service
  ports:
    - "3002:3002"
    - "50051:50051"
  environment:
    - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/account_db
    - SPRING_DATASOURCE_USERNAME=root
    - SPRING_DATASOURCE_PASSWORD=123456
    - SPRING_DATA_REDIS_HOST=redis
    - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
    - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
  depends_on:
    - mysql
    - redis
```

## üß™ Testing

### Health Check

```bash
curl http://localhost:3002/auth/health
```

### Login Test

```bash
curl -X POST http://localhost:3002/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123"}'
```

### Register Test

```bash
curl -X POST http://localhost:3002/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","email":"test@example.com","password":"password123","phone":"0123456789"}'
```

## üîÑ Service Communication

### With API Gateway

- **Protocol**: gRPC
- **Port**: 50051
- **Service**: AccountService
- **Authentication**: JWT validation

### With Other Services

- **Account Service** ‚Üí **Booking Service**: User validation
- **Account Service** ‚Üí **Payment Service**: User validation
- **API Gateway** ‚Üí **Account Service**: Authentication & authorization

## üìä Monitoring

### Health Endpoints

- `GET /actuator/health` - Spring Boot Actuator
- `GET /auth/health` - Custom health check

### Metrics

- `GET /actuator/prometheus` - Prometheus metrics
- `GET /actuator/metrics` - Application metrics

## üöÄ Development

### Local Development

```bash
# Start dependencies
docker-compose up mysql redis -d

# Run application
mvn spring-boot:run

# Or with Maven wrapper
./mvnw spring-boot:run
```

### Build

```bash
mvn clean package -DskipTests
```

### Database Migration

- Hibernate auto-ddl: `update`
- Manual migration: SQL scripts in `src/main/resources/`

## üõ†Ô∏è Code Standards

### Naming Conventions

- **Classes**: PascalCase (e.g., `AccountService`)
- **Methods**: camelCase (e.g., `findByEmail`)
- **Variables**: camelCase (e.g., `userRepository`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `JWT_EXPIRATION`)

### Package Structure

- **Controller**: Handle HTTP requests
- **Service**: Business logic
- **Repository**: Data access
- **Entity**: JPA entities
- **DTO**: Data transfer objects
- **Config**: Configuration classes

### Error Handling

- **Global Exception Handler**: `@ControllerAdvice`
- **Custom Exceptions**: Business logic errors
- **Validation**: `@Valid` annotations
- **Response Format**: Consistent JSON structure

## üîß Troubleshooting

### Common Issues

1. **JWT Key Mismatch**: Ensure private/public keys match
2. **Database Connection**: Check MySQL credentials and network
3. **Redis Connection**: Verify Redis is running
4. **Port Conflicts**: Ensure ports 3002, 50051 are available

### Logs

```bash
# View application logs
docker-compose logs account-service

# View specific log level
docker-compose logs account-service | grep ERROR
```

## üìù Notes

- **UUID**: All entity IDs use UUID for better distributed system support
- **Soft Delete**: Entities use `deletedAt` for soft deletion
- **UTC Time**: All timestamps stored in UTC
- **Validation**: Input validation using Bean Validation
- **Security**: JWT tokens are stateless and secure
- **Scalability**: Service can be horizontally scaled
